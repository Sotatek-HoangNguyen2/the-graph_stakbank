// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stake_id(): BigInt | null {
    let value = this.get("stake_id");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stake_id(value: BigInt | null) {
    if (value === null) {
      this.unset("stake_id");
    } else {
      this.set("stake_id", Value.fromBigInt(value as BigInt));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get purchaser(): Bytes | null {
    let value = this.get("purchaser");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set purchaser(value: Bytes | null) {
    if (value === null) {
      this.unset("purchaser");
    } else {
      this.set("purchaser", Value.fromBytes(value as Bytes));
    }
  }

  get beneficiary(): Bytes | null {
    let value = this.get("beneficiary");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set beneficiary(value: Bytes | null) {
    if (value === null) {
      this.unset("beneficiary");
    } else {
      this.set("beneficiary", Value.fromBytes(value as Bytes));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get eth_reward(): BigInt | null {
    let value = this.get("eth_reward");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eth_reward(value: BigInt | null) {
    if (value === null) {
      this.unset("eth_reward");
    } else {
      this.set("eth_reward", Value.fromBigInt(value as BigInt));
    }
  }

  get usdt_reward(): BigInt | null {
    let value = this.get("usdt_reward");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set usdt_reward(value: BigInt | null) {
    if (value === null) {
      this.unset("usdt_reward");
    } else {
      this.set("usdt_reward", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction_hash(): string | null {
    let value = this.get("transaction_hash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction_hash(value: string | null) {
    if (value === null) {
      this.unset("transaction_hash");
    } else {
      this.set("transaction_hash", Value.fromString(value as string));
    }
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stake_id(): BigInt | null {
    let value = this.get("stake_id");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stake_id(value: BigInt | null) {
    if (value === null) {
      this.unset("stake_id");
    } else {
      this.set("stake_id", Value.fromBigInt(value as BigInt));
    }
  }

  get user(): Bytes | null {
    let value = this.get("user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes | null) {
    if (value === null) {
      this.unset("user");
    } else {
      this.set("user", Value.fromBytes(value as Bytes));
    }
  }

  get is_unstaked(): boolean {
    let value = this.get("is_unstaked");
    return value.toBoolean();
  }

  set is_unstaked(value: boolean) {
    this.set("is_unstaked", Value.fromBoolean(value));
  }

  get stake_time(): BigInt | null {
    let value = this.get("stake_time");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stake_time(value: BigInt | null) {
    if (value === null) {
      this.unset("stake_time");
    } else {
      this.set("stake_time", Value.fromBigInt(value as BigInt));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get eth_reward(): BigInt | null {
    let value = this.get("eth_reward");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eth_reward(value: BigInt | null) {
    if (value === null) {
      this.unset("eth_reward");
    } else {
      this.set("eth_reward", Value.fromBigInt(value as BigInt));
    }
  }

  get usdt_reward(): BigInt | null {
    let value = this.get("usdt_reward");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set usdt_reward(value: BigInt | null) {
    if (value === null) {
      this.unset("usdt_reward");
    } else {
      this.set("usdt_reward", Value.fromBigInt(value as BigInt));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(value as Array<string>));
    }
  }
}
