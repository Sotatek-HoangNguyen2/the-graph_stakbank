// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminDistributeReward extends ethereum.Event {
  get params(): AdminDistributeReward__Params {
    return new AdminDistributeReward__Params(this);
  }
}

export class AdminDistributeReward__Params {
  _event: AdminDistributeReward;

  constructor(event: AdminDistributeReward) {
    this._event = event;
  }

  get ethToReward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get usdtToReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }
}

export class StakBankConfigurationChanged extends ethereum.Event {
  get params(): StakBankConfigurationChanged__Params {
    return new StakBankConfigurationChanged__Params(this);
  }
}

export class StakBankConfigurationChanged__Params {
  _event: StakBankConfigurationChanged;

  constructor(event: StakBankConfigurationChanged) {
    this._event = event;
  }

  get changer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }
}

export class UserStaked extends ethereum.Event {
  get params(): UserStaked__Params {
    return new UserStaked__Params(this);
  }
}

export class UserStaked__Params {
  _event: UserStaked;

  constructor(event: UserStaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UserUnstakedAll extends ethereum.Event {
  get params(): UserUnstakedAll__Params {
    return new UserUnstakedAll__Params(this);
  }
}

export class UserUnstakedAll__Params {
  _event: UserUnstakedAll;

  constructor(event: UserUnstakedAll) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserUnstakedWithId extends ethereum.Event {
  get params(): UserUnstakedWithId__Params {
    return new UserUnstakedWithId__Params(this);
  }
}

export class UserUnstakedWithId__Params {
  _event: UserUnstakedWithId;

  constructor(event: UserUnstakedWithId) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get usdtReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UserWithdrawedReward extends ethereum.Event {
  get params(): UserWithdrawedReward__Params {
    return new UserWithdrawedReward__Params(this);
  }
}

export class UserWithdrawedReward__Params {
  _event: UserWithdrawedReward;

  constructor(event: UserWithdrawedReward) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdtReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__checkDetailStakingRequestResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  checkDetailStakingRequest(
    user: Address,
    idStake: BigInt
  ): Contract__checkDetailStakingRequestResult {
    let result = super.call(
      "checkDetailStakingRequest",
      "checkDetailStakingRequest(address,uint256):(uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(idStake)
      ]
    );

    return new Contract__checkDetailStakingRequestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_checkDetailStakingRequest(
    user: Address,
    idStake: BigInt
  ): ethereum.CallResult<Contract__checkDetailStakingRequestResult> {
    let result = super.tryCall(
      "checkDetailStakingRequest",
      "checkDetailStakingRequest(address,uint256):(uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(idStake)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__checkDetailStakingRequestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  countdownToNextDistribution(): BigInt {
    let result = super.call(
      "countdownToNextDistribution",
      "countdownToNextDistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_countdownToNextDistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countdownToNextDistribution",
      "countdownToNextDistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimal(): BigInt {
    let result = super.call("decimal", "decimal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimal", "decimal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateNextDistribution(): BigInt {
    let result = super.call(
      "estimateNextDistribution",
      "estimateNextDistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimateNextDistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateNextDistribution",
      "estimateNextDistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeCalculator(amount: BigInt): BigInt {
    let result = super.call(
      "feeCalculator",
      "feeCalculator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_feeCalculator(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeCalculator",
      "feeCalculator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feePerDecimal(): BigInt {
    let result = super.call("feePerDecimal", "feePerDecimal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePerDecimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feePerDecimal",
      "feePerDecimal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastDis(): BigInt {
    let result = super.call("lastDis", "lastDis():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastDis(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastDis", "lastDis():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minAmountToStake(): BigInt {
    let result = super.call(
      "minAmountToStake",
      "minAmountToStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minAmountToStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minAmountToStake",
      "minAmountToStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numEthToReward(): BigInt {
    let result = super.call("numEthToReward", "numEthToReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numEthToReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numEthToReward",
      "numEthToReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numUsdtToReward(): BigInt {
    let result = super.call(
      "numUsdtToReward",
      "numUsdtToReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numUsdtToReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numUsdtToReward",
      "numUsdtToReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberDistribution(): BigInt {
    let result = super.call(
      "numberDistribution",
      "numberDistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberDistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberDistribution",
      "numberDistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfStakeHolder(): BigInt {
    let result = super.call(
      "numberOfStakeHolder",
      "numberOfStakeHolder():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfStakeHolder(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfStakeHolder",
      "numberOfStakeHolder():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  periodTime(): BigInt {
    let result = super.call("periodTime", "periodTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodTime", "periodTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingOf(user: Address): BigInt {
    let result = super.call("stakingOf", "stakingOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_stakingOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakingOf", "stakingOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdt(): Address {
    let result = super.call("usdt", "usdt():(address)", []);

    return result[0].toAddress();
  }

  try_usdt(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdt", "usdt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _periodTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _feePerDecimal(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _decimal(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CloseStakBankCall extends ethereum.Call {
  get inputs(): CloseStakBankCall__Inputs {
    return new CloseStakBankCall__Inputs(this);
  }

  get outputs(): CloseStakBankCall__Outputs {
    return new CloseStakBankCall__Outputs(this);
  }
}

export class CloseStakBankCall__Inputs {
  _call: CloseStakBankCall;

  constructor(call: CloseStakBankCall) {
    this._call = call;
  }

  get number(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseStakBankCall__Outputs {
  _call: CloseStakBankCall;

  constructor(call: CloseStakBankCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RewardDistributionCall extends ethereum.Call {
  get inputs(): RewardDistributionCall__Inputs {
    return new RewardDistributionCall__Inputs(this);
  }

  get outputs(): RewardDistributionCall__Outputs {
    return new RewardDistributionCall__Outputs(this);
  }
}

export class RewardDistributionCall__Inputs {
  _call: RewardDistributionCall;

  constructor(call: RewardDistributionCall) {
    this._call = call;
  }
}

export class RewardDistributionCall__Outputs {
  _call: RewardDistributionCall;

  constructor(call: RewardDistributionCall) {
    this._call = call;
  }
}

export class SetDecimalCall extends ethereum.Call {
  get inputs(): SetDecimalCall__Inputs {
    return new SetDecimalCall__Inputs(this);
  }

  get outputs(): SetDecimalCall__Outputs {
    return new SetDecimalCall__Outputs(this);
  }
}

export class SetDecimalCall__Inputs {
  _call: SetDecimalCall;

  constructor(call: SetDecimalCall) {
    this._call = call;
  }

  get _decimal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDecimalCall__Outputs {
  _call: SetDecimalCall;

  constructor(call: SetDecimalCall) {
    this._call = call;
  }
}

export class SetFeePerDecimalCall extends ethereum.Call {
  get inputs(): SetFeePerDecimalCall__Inputs {
    return new SetFeePerDecimalCall__Inputs(this);
  }

  get outputs(): SetFeePerDecimalCall__Outputs {
    return new SetFeePerDecimalCall__Outputs(this);
  }
}

export class SetFeePerDecimalCall__Inputs {
  _call: SetFeePerDecimalCall;

  constructor(call: SetFeePerDecimalCall) {
    this._call = call;
  }

  get _feePerDecimal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeePerDecimalCall__Outputs {
  _call: SetFeePerDecimalCall;

  constructor(call: SetFeePerDecimalCall) {
    this._call = call;
  }
}

export class SetMinAmountToStakeCall extends ethereum.Call {
  get inputs(): SetMinAmountToStakeCall__Inputs {
    return new SetMinAmountToStakeCall__Inputs(this);
  }

  get outputs(): SetMinAmountToStakeCall__Outputs {
    return new SetMinAmountToStakeCall__Outputs(this);
  }
}

export class SetMinAmountToStakeCall__Inputs {
  _call: SetMinAmountToStakeCall;

  constructor(call: SetMinAmountToStakeCall) {
    this._call = call;
  }

  get _minAmountToStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinAmountToStakeCall__Outputs {
  _call: SetMinAmountToStakeCall;

  constructor(call: SetMinAmountToStakeCall) {
    this._call = call;
  }
}

export class SetPeriodTimeCall extends ethereum.Call {
  get inputs(): SetPeriodTimeCall__Inputs {
    return new SetPeriodTimeCall__Inputs(this);
  }

  get outputs(): SetPeriodTimeCall__Outputs {
    return new SetPeriodTimeCall__Outputs(this);
  }
}

export class SetPeriodTimeCall__Inputs {
  _call: SetPeriodTimeCall;

  constructor(call: SetPeriodTimeCall) {
    this._call = call;
  }

  get _periodTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPeriodTimeCall__Outputs {
  _call: SetPeriodTimeCall;

  constructor(call: SetPeriodTimeCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get stakedAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeAllCall extends ethereum.Call {
  get inputs(): UnstakeAllCall__Inputs {
    return new UnstakeAllCall__Inputs(this);
  }

  get outputs(): UnstakeAllCall__Outputs {
    return new UnstakeAllCall__Outputs(this);
  }
}

export class UnstakeAllCall__Inputs {
  _call: UnstakeAllCall;

  constructor(call: UnstakeAllCall) {
    this._call = call;
  }
}

export class UnstakeAllCall__Outputs {
  _call: UnstakeAllCall;

  constructor(call: UnstakeAllCall) {
    this._call = call;
  }
}

export class UnstakeWithIdCall extends ethereum.Call {
  get inputs(): UnstakeWithIdCall__Inputs {
    return new UnstakeWithIdCall__Inputs(this);
  }

  get outputs(): UnstakeWithIdCall__Outputs {
    return new UnstakeWithIdCall__Outputs(this);
  }
}

export class UnstakeWithIdCall__Inputs {
  _call: UnstakeWithIdCall;

  constructor(call: UnstakeWithIdCall) {
    this._call = call;
  }

  get idStake(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeWithIdCall__Outputs {
  _call: UnstakeWithIdCall;

  constructor(call: UnstakeWithIdCall) {
    this._call = call;
  }
}

export class WithdrawRewardCall extends ethereum.Call {
  get inputs(): WithdrawRewardCall__Inputs {
    return new WithdrawRewardCall__Inputs(this);
  }

  get outputs(): WithdrawRewardCall__Outputs {
    return new WithdrawRewardCall__Outputs(this);
  }
}

export class WithdrawRewardCall__Inputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }
}

export class WithdrawRewardCall__Outputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }
}
